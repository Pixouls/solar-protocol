# API v3 changelog

What happens when the gateway goes down?

### renames
charge-controller => /charge
TODO: change back to charge-controller
networkInfo => /devices # we should change devices.json and this endpoint to be the same
systemInfo => /system
server-status => /status # could be server? overloaded term. maybe device

normalized all responses to be arrays (even if 1 item)

deprecated `time` and just using unix epoch `timestamp`
deprecated response `timezone` since all times in unix epoch / UTC
  - viz/html will need to convert to local at build-time

[ {commonStrings: ['pv-watts', 'description'], data: [ [13.2, c[1]], [9.2, 'my server' ] } ]
 => 
  [
    { 'pv-watts': 13.2, 'description': 'my server' },
    { 'pv-watts': 9.2, 'description': 'my server' },
  ]

TODO: run a workshop with this format?

removed headers for now - move towards 'self-describing data' - see charge controller returns

### endpoint changes

/charge-controller
  latest [ ]

/charge-controller?days={int}&key={pv-wattage|pv-current...|etc..}

/charge-controller/2022-14-12?key={pv-wattage}[&line=999999]
  implemented scaled wattage
  implemented `day` path (`/charge/2022-14-24`)
  implemented `days` and `key` params
  renamed `duration` => `days` only supports number, no other arguments
  deprecated 'tracerData' option for `day`
  deprecated 'list' option for `day` (no code seemed to use it)
    # TODO: list of filenames is useful as teaching aid, re-add (/charge-controller/list?)
  deprecated 'line' option for `day` (no code seemed to use it)
    # TODO: line from filename is useful as teaching aid, re-add (/charge-controller/line?)
    # TODO: Run Workshop, keeping in mind the pains of discovery and learning
    #   minimize the amount of programming needed to get the stuff they need
    #   example: if we pass metadata 'lines' in the response, they dont need to run .length in a console
    #
    # VALUES/FEEDBACK:
    #   the less the client is doing, the more the sun is being used
    #   the more server-side, even if its less efficient, the better
  [
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  { pv-wattage: 123, timestamp: 123567772.1625 },
  ]
  ^
  /charge-controller?&line=12

  before- 
    request(http..line=12).then(response => console.log(response))

  after-
    request(http.........).then(response => console.log(response[12]))

/system
  always return a list, even for one item
  deprecated `dump` arg, empty value will work like `dump` used to
  
/devices
  "time stamp" => 'timestamp'

/server
  unimplemented - lets talk about this - maybe we can make a subsite/page that lets you go directly to different servers by IP address instead of proxying information. Unless proxying is the cool part.
  How does this work with the gateway?

/status
  initial implementation - nginx has different info. if uptime is useful we should add that

/ip
  moved from gateway to api!
  need to check that we hash the same way as before

/myip
  moved from gateway to api!
  TODO: should we remove server. prefix, for getting ip address?

/secrets
  changed from bash environment .spenv to /local/secrets.json
  no more worrying eval / parsing in bash
  TODO: need migration plan for existing files
