#!/usr/bin/env bash

if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unattended=$(echo "$@" | grep --quiet -- '--yes' && echo yes)
command="${1-help}"
shift
cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null

set -o errexit
set -o nounset

exists() {
  command -v "$@" >/dev/null 2>&1
}

help() {
  Clear='\033[0m'
  Green='\033[0;32m'
  Blue='\033[0;34m'

  echo -e "$(
  cat << HELP

  ☀️ solar-protocol - commandline tool to help manage your server

    ${Blue}solar-protocol install${Clear}               install dependencies to build and run solar-protocol
    ${Blue}solar-protocol up${Clear}                    start all the services in production mode
    ${Blue}solar-protocol logs api${Clear}              show api logs
    ${Blue}solar-protocol dev${Clear}                   start in dev mode with live code reloading
    ${Blue}solar-protocol status${Clear}                check status of the containers
    ${Blue}solar-protocol restart datalogger${Clear}    restart the datalogger
    ${Blue}solar-protocol down${Clear}                  stop all services
    ${Blue}solar-protocol shell protocol${Clear}        open a shell in the protocol container
    ${Blue}solar-protocol update-dns [password]${Clear} update the dns for solarprotocol.net
HELP
  )"
}

compose-exec() {
  compose-dev exec protocol "$@"
}

build-viz() {
  compose-exec python /protocol/build/viz.py "$@"
}

build-html() {
  compose-exec python /protocol/build/html.py "$@"
}

get-remote-data() {
  compose-exec python /protocol/core/getRemoteData.py "$@"
}

generate() {
  get-remote-data "$@"
  build-viz "$@"
  build-html "$@"
}

machine() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
  fi
}

update-dns() {
  LOGFILE=namecheap.log
  HOST=beta
  DOMAIN=solarprotocol.net
  PASSWORD=$1
  DDNS=https://dynamicdns.park-your-domain.com

  # Get current time
  TIME=$(date +%Y-%m-%d:%H:%M)
  echo "TIME: $TIME"

  # Get current IP
  IP=$(curl --insecure --silent "${DDNS}/getip")
  echo "IP: $IP"

  # Update Namecheap DDNS
  RESPONSE=$(curl --insecure --silent "${DDNS}/update?host=${HOST}&domain=${DOMAIN}&password=${PASSWORD}&ip=${IP}")
  echo "RESPONSE: "
  echo $RESPONSE

  # Log the time and IP
  echo "$TIME - $IP" >> $LOGFILE
}

install() {
  # macOS requires a vm
  if [[ "$(uname -s)" == "Darwin" ]]; then
    exists podman podman-compose || brew install podman podman-compose

    podman machine inspect >/dev/null 2>&1 || podman machine init --volume /Users

    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
    return
  fi

  # raspberry pi - requires debian bookworm + opensuse kubic packages
  if exists raspi-config; then
    libcontainerslist=/etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list
    if test ! -f $libcontainerslist; then
      sudo mkdir -p /etc/apt/keyrings
      base=https://download.opensuse.org/repositories
      repo=devel:kubic:libcontainers:unstable/Debian_Testing/
      keyring=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg
      arch=$(dpkg --print-architecture)

      curl --fail --silent --show-error --location "${base}/${repo}/Release.key" \
        | gpg --dearmor \
        | sudo tee $keyring > /dev/null

      echo "deb [arch=$arch signed-by=$keyring]\n${base}/${repo} /" \
        | sudo tee $libcontainerslist > /dev/null
    fi

    # upgrade to bookworm if we aren't already on it
    if ! grep --quiet 'bookworm\|testing' /etc/apt/sources.list; then
      prompt "Upgrade Raspberry Pi OS to bookworm?" 
      sudo sed --in-place --expression 's/buster/bookworm/g' /etc/apt/sources.list
      sudo sed --in-place --expression 's/bullseye/bookworm/g' /etc/apt/sources.list
      sudo apt-get update
      sudo apt-get full-upgrade --yes
      # Fix a bug with dhcpcd5 in raspberry pi OS
      waitfile="/etc/systemd/system/dhcpcd.service.d/wait.conf"
      if ! grep --quiet --extended-regexp "^ExecStart=$(which dhcpcd) -q -w$" $waitfile; then
        sudo sed --in-place --expression "s|ExecStart=.*w$|ExecStart=$(which dhcpcd) -q -w|" $waitfile
      fi
      prompt "Upgrade to bookworm finished. Make sure to rerun solar-protocol install after reboot. Reboot?"
      sudo reboot
    fi

    # install podman and podman-compose if needed
    if ! exists podman podman-compose; then
      sudo apt-get update
      sudo apt-get install --yes podman podman-compose
    fi

    # install systemd
    install-systemd
    return
  fi

  if [[ "$(uname -s)" == "Linux" ]]; then
    exists podman || sudo apt-get install --yes podman
    exists pip || sudo apt-get install --yes python3-pip
    exists podman-compose || pip install podman-compose
    return
  fi

  if grep -qi microsoft /proc/version; then
    echo See the official windows install docs to install podman and podman-compose
    echo
    echo https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md
  fi

  if [[ -f ~/.bashrc ]]; then
    if ! grep --quiet solar-protocol ~/.bashrc; then
      prompt "Add solar-protocol to bash?" && echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
    fi
  fi

  if [[ -f ~/.zshrc ]]; then
    if grep --quiet solar-protocol ~/.zshrc; then
      echo "solar-protocl found in zsh, skipping install"
    else
      if prompt "Add solar-protocol to zsh?"; then
        if grep --quiet compinit ~/.zshrc; then
          tmpfile=$(mktemp)
          awk "!found && /compinit/ { print \"fpath=($PWD\/dev \$fpath)\"; found=1 } 1" ~/.zshrc > $tmpfile
          mv $tmpfile ~/.zshrc
        else
	        echo "fpath=($PWD\/dev \$fpath); compinit\"" >> ~/.zshrc
        fi
        echo "export PATH=\$PATH:$PWD" >> ~/.zshrc
      fi
    fi
  fi

  exists podman podman-compose
}


prompt() {
  if [[ "$unattended" != "yes" ]]; then
    read -r -p "$* (y/N) " confirm && \
      [[ $confirm == [yY] || $confirm == [yY][eE][sS ]] \
      || exit 1
  fi
}

compose() { machine; podman-compose --file compose.yaml "$@"; }

compose-dev() { machine; compose --file dev/compose.yaml "$@"; }

password() { openssl rand -hex 8; }

bcrypt() { htpasswd -bnBC 10 "" $1 | tr -d ':\n'; }

reset() {
  compose down
  podman machine stop
  podman machine rm podman-machine-default
  install
}

format() {
  shopt -s globstar
  black -- **/**.py
  tidy -i -m -w 160 -ashtml -utf8 **/**.html
}

build() {
  podman image exists localhost/solar-protocol/base:beta || compose build common
  compose build "$@"
}

install-systemd() {
  servicedir=$HOME/.config/systemd/user
  mkdir -p $servicedir
  cd $servicedir
  for service in datalogger api protocol web; do
    servicename=container-solar-protocol_${service}_1
    if ! test -f ${servicename}.service; then
      podman generate systemd --new --files --name $servicename
    fi
    systemctl --user daemon-reload
    if [[ systemctl --user is-active $servicename == "inactive" ]]; then
      systemctl --user enable $servicename
      systemctl --user start $servicename
    fi
  done
}

case $command in
  up) compose up "$@" ;;
  down) compose down "$@" ;;
  status) compose-dev ps 2>/dev/null ;;
  restart) compose-dev restart "${@:-api datalogger protocol web}" ;;
  logs) compose-dev logs "${@:-protocol}" ;;
  build) build "$@" ;;
  shell) compose-dev exec "${1:-protocol}" /bin/bash ;;
  dev) compose-dev up ;;
  open) open http://127.0.0.1:11221 || xdg-open http://127.0.0.1:11221 ;;
  format) format ;;
  exec) compose-exec "$@" ;;
  run) compose run "$@" ;;
  generate) generate "$@" ;;
  password) password ;;
  update-dns) update-dns "$@" ;;
  get-remote-data) get-remote-data "$@" ;;
  build-viz) build-viz "$@" ;;
  build-html) build-html "$@" ;;
  hash) bcrypt "$1" ;;
  install-systemd) install-systemd ;;
  reset) reset ;;
  keygen) pass=$(password); echo password: $pass; echo hash: $(bcrypt $pass) ;;
  install) install ;;
  *) help ;;
esac

