#!/usr/bin/env bash

if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unattended=$(echo "$@" | grep --quiet -- '--yes' && echo yes)
command="${1-help}"
shift
cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null

set -o errexit
set -o nounset

help() {
  Clear='\033[0m'
  Green='\033[0;32m'
  Blue='\033[0;34m'

  echo -e "$(
  cat << HELP

  ☀️ solar-protocol - commandline tool to help manage your server

  ${Green}install system dependencies:

    ${Blue}solar-protocol init

  ${Green}start the server:

    ${Blue}solar-protocol up

  ${Green}check the api logs:

    ${Blue}solar-protocol logs api

  ${Green}start in dev mode with live code reloading:

    ${Blue}solar-protocol dev

  ${Green}check status of the containers:

    ${Blue}solar-protocol status

  ${Green}restart the datalogger:

    ${Blue}solar-protocol restart datalogger

  ${Green}stop the server:

    ${Blue}solar-protocol down

  ${Green}open a shell in the protocol container:

    ${Blue}solar-protocol shell protocol${Clear}
HELP
  )"
}

exec() {
  compose-dev exec protocol "$@"
}

generate() {
  exec python /solar-protocol/venv/core/getRemoteData.py
  exec python /solar-protocol/venv/build/viz.py
  exec python /solar-protocol/venv/build/html.py DEV
}

machine() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
  fi
}

init() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    command -v podman >/dev/null 2>&1 || brew install podman
    command -v podman-compose >/dev/null 2>&1 || brew install podman-compose

    podman machine inspect >/dev/null 2>&1 || {
      podman machine init --volume /Users
    }

    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
  elif command -v raspi-config >/dev/null; then
    # raspberry pi
    if grep --quiet 'bookworm\|testing' /etc/apt/sources.list; then
        command -v podman >/dev/null || sudo apt-get install --yes podman
        command -v podman-compose >/dev/null || sudo apt-get install --yes podman-compose
    else
      prompt "Upgrade Raspberry Pi OS to bookworm?" 
      sudo sed --in-place --expression 's/buster/bookworm/g' /etc/apt/sources.list
      sudo sed --in-place --expression 's/bullseye/bookworm/g' /etc/apt/sources.list
      sudo apt-get update
      sudo apt-get full-upgrade --yes
      # Fix a bug with dhcpcd5 in raspberry pi OS
      waitfile="/etc/systemd/system/dhcpcd.service.d/wait.conf"
      if ! grep --quiet --extended-regexp "^ExecStart=$(which dhcpcd) -q -w$" $waitfile; then
        sudo sed --in-place --expression "s|ExecStart=.*w$|ExecStart=$(which dhcpcd) -q -w|" $waitfile
      fi
      prompt "Upgrade to bookworm finished. Reboot?"
      sudo reboot
    fi
  elif [[ "$(uname -s)" == "Linux" ]]; then
    command -v podman >/dev/null || sudo apt-get install --yes podman
    command -v pip >/dev/null || sudo apt-get install --yes python3-pip
    command -v podman-compose >/dev/null || pip install podman-compose
  else
    echo See the official windows install docs to install podman and podman-compose
    echo
    echo https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md
  fi

  if [[ -f ~/.bashrc ]]; then
    if ! grep --quiet solar-protocol ~/.bashrc; then
      prompt "Add solar-protocol to bash?" && echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
    fi
  fi

  if [[ -f ~/.zshrc ]]; then
    if grep --quiet solar-protocol ~/.zshrc; then
      echo "solar-protocl found in zsh, skipping install"
    else
      if prompt "Add solar-protocol to zsh?"; then
        if grep --quiet compinit ~/.zshrc; then
          tmpfile=$(mktemp)
          awk "!found && /compinit/ { print \"fpath=($PWD\/dev \$fpath)\"; found=1 } 1" ~/.zshrc > $tmpfile
          mv $tmpfile ~/.zshrc
        else
	        echo "fpath=($PWD\/dev \$fpath); compinit\"" >> ~/.zshrc
        fi
        echo "export PATH=\$PATH:$PWD" >> ~/.zshrc
      fi
    fi
  fi

  command -v podman >/dev/null 2>&1 && command -v podman-compose >/dev/null 2>&1 \
    && echo podman and podman-compose found, init complete!
}


prompt() {
  if [[ "$unattended" != "yes" ]]; then
    read -r -p "$* (y/N) " confirm && \
      [[ $confirm == [yY] || $confirm == [yY][eE][sS ]] \
      || exit 1
  fi
}

compose() { machine; podman-compose --file compose.yaml "$@"; }

compose-dev() { machine; compose --file dev/compose.yaml "$@"; }

password() { openssl rand -hex 8; }

bcrypt() { htpasswd -bnBC 10 "" $1 | tr -d ':\n'; }

case $command in
  up) compose up "$@" ;;
  down) compose down "$@" ;;
  status) compose-dev ps ;;
  restart) compose-dev restart "${*:-api datalogger protocol web}" ;;
  logs) compose-dev logs "${1:-protocol}" ;;
  build) compose build "$@" ;;
  shell) compose-dev exec "${1:-protocol}" /bin/bash ;;
  dev) compose-dev up --build --detach ;;
  open) open http://127.0.0.1:11221 || xdg-open http://127.0.0.1:11221 ;;
  format) shopt -s globstar; black -- **/**.py ;;
  exec) exec "$@" ;;
  generate) generate ;;
  password) password ;;
  hash) bcrypt "$1" ;;
  keygen) pass=$(password); echo password: $pass; echo hash: $(bcrypt $pass) ;;
  init) init ;;
  *) help ;;
esac

